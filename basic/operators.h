#ifndef OPERATORS_H
#define OPERATORS_H

//Операторы C++

/*
Арифметические:
    + сложение
    - вычитание
    * умножение
    / деление
    % вычисление остатка от деления
    ~ побитовый НЕ
    & побитовый И
    | побитовый ИЛИ
    ^ побитовый XOR
    >> побитовый сдвиг вправо
    << побитовый сдвиг влево

Операторы инкремента
    а++ постфиксный инкремент
    а-- постфиксный декремент
    ++а префиксный инкремент
    --а префиксный декремент

Логические операторы
    ! логическое НЕ
    && логическое И
    || логическое ИЛИ

Операторы сравнения
    == равно
    != не равно
    < меньше
    > больше
    <= меньше или равно
    >= больше или равно
    <=> сравнение

Операторы присвоения
    =
    +=
    -=
    *=
    /=
    %=
    &=
    ^=
    |=
    <<=
    >>=

Операторы доступа
    . обращение к члену класса
    -> обращение к члену класса
    [] взятие элемента в массиве
    * разыменование указателя
    & взятие адреса

Другие операторы
    () вызов функции
    , последовательное выполнение
    ?: тернарный условный оператор

Специальные операторы
    static_cast, dynamic_cast, reinterpret_cast, const_cast
    new
    new[]
    delete
    delete[]
    sizeof
    typeid
    ::


Приоритет операций.
-------------------

Операции с меньшим номером выполняются раньше. Операции в одной группе выполняются
одна за другой. Приоритет операций можно менять с помощью скобок ().


Группа Оператор    Описание
1      ::           разрешение имен
2      a++   a--    постфиксный инкремент/декремент
       type()       преобразование типа
       type{}       преобразование типа
       a()          вызов функции
       a[]          взятие элемента массива
       .            доступ к члену класса
       ->           доступ к члену класса
3      ++a   --a    префиксный инкремент/декремент
       +a   -a      унарный плюс и минус
       !            логическое НЕ
       ~            побитовое НЕ
       (type)       преобразование типа
       *a           разымерование указателя
       &a           взятие адреса
       sizeof       определение размера
       new   new[]  динамическое выделение памяти
       delete
       delete[]     динамическая очистка памяти
4      .*   ->*     указатель на член класса
5      a*b          умножение
       a/b          деление
       a%b          остаток от деления
6      a+b          сложение
       a-b          вычитание
7      <<   >>      побитовый левый и правый сдвиг
8      <=>          оператор сравнения (C++20)
9      <   <=       операторы меньше и меньше или равно
       >   >=       операторы больше и больше или равно
10     ==   !=      операторы равно и не равно
11     &            побитовое И
12     ^            побитовое XOR
13     |            побитовое ИЛИ
14     &&           логическое И
15     ||           логическое ИЛИ
16     a?b:c        тернарное сравнение
       throw        оператор throw
       co_yield     выражение yield (C++20)
       =            присвоение
       +=   -=      присвоение
       *=   /=   %= присвоение
       <<=   >>=    присвоение
       &=   ^=   |= присвоение
17     ,            запятая

*/

//Операторы более подробно

/*
Арифметические:
---------------
Если результат операции не помещается в переменную выбранного типа, то произойдет переполнение,
и в переменной окажется записано не то, что нужно. Пример:

short int x=20000, y=20000, z;
z=x+y; //должны были получить 40000, но это число не влезает в short int. Получим -25536

Оператор деления, примененный к двум целым числам, вернет только целую часть от частного.
Например, 1/2=0. Если требуется сохранить остаток от деления, необходимо делить вещественные
числа: 1.0/2.0=0.5

Вычисление остатка % применимо только к целым числам

В языке C++ нет оператора возведения в степень. Для возведения в степень следует использовать
функцию pow из заголовочного файла <cmath>

Побитовые операции действуют на отдельные биты числа в двоичной записи согласно законам
математической логики.
~ меняет биты с 1 на 0 и с 0 на 1
& дает 1, если оба бита равны 1
| дает 0, если оба бита равны 0
^ дает 1, если биты различны
>> сдвигает все биты вправо, теряя самые левые биты
<< сдвигает все биты влево, добавляя справа нули

Примеры: Возьмем два числа: 32 = 0b100000 и 37 = 0b100101 и запишем их как 8-битные беззнаковые числа

~32 = ~0b00100000 = 0b11011111 = 223
~37 = ~0b00100101 = 0b11011010 = 218
32&37 = 0b00100000
      & 0b00100101
      = 0b00100000 = 32

32|37 = 0b00100000
      | 0b00100101
      = 0b00100101 = 37

32^37 = 0b00100000
      ^ 0b00100101
      = 0b00000101 = 5

32>>1 = 0b00100000>>1
      = 0b00010000 = 16

32<<1 = 0b00100000<<1
      = 0b01000000 = 64


Операторы инкремента
--------------------

позволяют увеличить или уменьшить значение переменной на 1. Префиксные операторы
выполняются чуть быстрее постфиксных. Основное их различие в том, в каком порядке
они выполняются в сложном выражении.
- префиксные операторы изменяют значение переменной и возвращают новое значение
- постфиксные операторы копируют значение переменной, изменяют значение переменной и
  возвращают старое неизмененное значение

int n1 = 1;
int n2 = ++n1; //n2=2, n1=2
int n3 = ++ ++n1; //n3=4, n1=4
int n4 = n1++; //n4=4, n1=5


Логические операторы и Операторы сравнения
------------------------------------------

Используются в условиях и циклах, будут изучены в свое время

Операторы присвоения
--------------------

Оператор = используется для присваивания переменной нового значения. Если переменная
используется как слева, так и справа от оператора =, существуют краткие формы записи
присвоения и применения других операторов:

    x += y эквивалентно x = x+y
    x -= y эквивалентно x = x-y
    и т.д.

Операторы доступа
    . обращение к члену класса   (будет изучаться в файле structs_classes.h)
    -> обращение к члену класса  (будет изучаться в файле structs_classes.h)
    [] взятие элемента в массиве (будет изучаться в файле pointers_arrays.h)
    * разыменование указателя    (будет изучаться в файле pointers_arrays.h)
    & взятие адреса              (будет изучаться в файле pointers_arrays.h)

Другие операторы
    () вызов функции               (будет изучаться в файле functions.h)
    , последовательное выполнение  (используется редко)
    ?: тернарный условный оператор (будет изучаться в файле ifs.h)

Специальные операторы
    static_cast, dynamic_cast, reinterpret_cast, const_cast
    new       (будет изучаться в файле pointers_arrays.h)
    new[]     (будет изучаться в файле pointers_arrays.h)
    delete    (будет изучаться в файле pointers_arrays.h)
    delete[]  (будет изучаться в файле pointers_arrays.h)
    sizeof
    typeid
*/


/*Задания
-------

1. Каков будет вывод следующего фрагмента программы: (переменная x имеет тип int)
     x = (1/3) * 3;
     std::cout << "(1/3) * 3 is equal to " << x;
2. Напишите программу, которая считывает два целых числа типа int и выводит в консоль
   целую часть и остаток от деления первого числа на второе. Попробуйте разные
   комбинации целых чисел при тестировании программы.
3. Следующий фрагмент программы предназначен для перевода градусов Цельсия в градусы Фаренгейта
      double c = 20;
      double f;
      f = (9/5) * c + 32.0;
   Ответьте на следующие вопросы:
 a.  Какое значение будет присвоено f?
 b.  Объясните, как оно было получено, и что хотел получить программист.
 c.  Перепишите код так, чтобы он выполнял задуманное.
4. Напишите программу, которая выводит в консоль побитовое отрицание двух переменных -
   переменной типа int и переменной типа unsigned int. Протестируйте программу на различных
   числах. Попробуйте объяснить результат.

*/

#endif // OPERATORS_H
